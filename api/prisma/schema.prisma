// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  tasks       Task[]
  taskActions Timeline[]

  @@map("users")
}

model Project {
  id          String   @id @default(uuid())
  title       String
  description String
  createdAt   DateTime @default(now()) @map("created_at")

  tasks Task[]

  @@map("projects")
}

enum Priority {
  URGENT
  HIGH
  LOW
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  priority    Priority @default(LOW)

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  assigneeId String?
  assignee   User?   @relation(fields: [assigneeId], references: [id])

  status    TaskStatus
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")

  timelines Timeline[]

  @@map("tasks")
}

enum TaskAction {
  CREATED
  UPDATED
  MOVED_TO_TODO
  MOVED_TO_IN_PROGRESS
  MOVED_TO_DONE
}

model Timeline {
  id     String     @id @default(uuid())
  action TaskAction

  actorId String
  actor   User   @relation(fields: [actorId], references: [id])

  taskId String
  task   Task   @relation(fields: [taskId], references: [id])

  timestamp DateTime @default(now()) @map("created_at")

  @@map("timelines")
}
